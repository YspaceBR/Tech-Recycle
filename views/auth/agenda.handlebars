<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <title>Minhas Coletas</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    .formulario-coleta {
      background-color: #f5f5f5;
      border-radius: 12px;
      padding: 16px;
      margin-bottom: 10px;
      margin: 5px 10px;
    }
    .formulario-coleta strong {
      display: block;
      font-family: "Montserrat", sans-serif;
      font-weight: 600;
      color: #333;
      font-size: 18px;
      margin-bottom: 6px;
    }
    .formulario-coleta .data-material {
      color: #04b700;
      font-weight: 500;
      font-family: "Montserrat", sans-serif;
      font-size: 15px;
      margin-top: 20px;
    }
    .nota {
      font-family: "SourceCodePro", sans-serif;
      font-weight: 500;
      font-size: 12px;
      color: gray;
      margin-top: 8px;
      margin-bottom: 8px;
      padding: 0 5px;
    }
    .button-container {
      display: flex;
      gap: 12vh;
      margin-top: 10px;
    }
    .btn-cancelar {
      background-color: #ff3b3b;
      color: white;
      width: 180px;
      padding: 10px 0;
      font-weight: 600;
      font-family: "Montserrat", sans-serif;
      border: none;
      font-size: 15px;
      border-radius: 8px;
    }
    .btn-cancelar:hover {
      background-color: #cc2e2e;
    }
    .btn-reagendar {
      background-color: #28a745;
      color: white;
      border: 1px solid #04b700;
      width: 180px;
      font-family: "Montserrat", sans-serif;
      padding: 10px 0;
      font-weight: 600;
      font-size: 15px;
      border-radius: 8px;
    }
    .btn-reagendar:hover {
      color: #28a745;
      background-color: white;
    } 
  </style>
</head>
<body>
  <a href="#"  style="font-size: 20px;" class="btn-login" id="back-btn" onclick="voltarPagina()">&#x276E;</a>

  <!-- Mensagem que fica acima do card -->
  <h3 id="mensagem-agendamento" style="font-size: 16px;font-weight: 600;margin-left: 10px; margin-top:2vh">Nenhuma coleta agendada</h3>

  <!-- Card com os dados -->
  <div class="formulario-coleta" id="info-agendamento" style="display: none;" data-id-coleta=""></div>

  <!-- Elementos abaixo do card -->
  <div id="info-extra" style="margin-bottom: 10px; padding: 10px"></div>

  <h3 style="margin-left: 10px; margin-top:20px; font-weight: 600;">Acesse o mapa para agendar<br>novas coletas a domicílio</h3>

  <div class="container-maps" style="margin-left: 10px;">
    <button class="pontos-maps" onclick="window.location.href='/mapa'">
      Ir para o mapa
    </button>
  </div>

  <script>
    // Capturar o ID da coleta da URL quando a página carrega
    document.addEventListener('DOMContentLoaded', function() {
      const urlParams = new URLSearchParams(window.location.search);
      const idColetaParam = urlParams.get('idColeta');
      
      if (idColetaParam) {
        console.log('ID da coleta encontrado na URL:', idColetaParam);
        
        // Recuperar ou criar o objeto de agendamento
        let agendamentoObj = {};
        const agendamentoStr = localStorage.getItem('agendamento');
        
        if (agendamentoStr) {
          try {
            agendamentoObj = JSON.parse(agendamentoStr);
          } catch (e) {
            console.error('Erro ao parsear agendamento:', e);
          }
        }
        
        // Atualizar o objeto com o ID correto da coleta
        agendamentoObj.idColeta = idColetaParam;
        
        // Salvar de volta no localStorage
        localStorage.setItem('agendamento', JSON.stringify(agendamentoObj));
        console.log('Agendamento salvo com ID da coleta:', idColetaParam);
      }
      
      carregarAgendamento();
    });
    
   function carregarAgendamento() {
  const agendamentoStr = localStorage.getItem('agendamento');
  const card = document.getElementById('info-agendamento');
  const mensagem = document.getElementById('mensagem-agendamento');
  const extra = document.getElementById('info-extra');
  
  console.log('Dados brutos do localStorage:', agendamentoStr);
  
  if (agendamentoStr) {
    try {
      const dados = JSON.parse(agendamentoStr);
      console.log('Dados do agendamento:', dados);

      // Verificação melhorada para data obrigatória
      if (!dados.data || dados.data === '' || dados.data === 'Data não especificada') {
        // Mostrar alerta e redirecionar para o formulário
        alert('⚠️ ATENÇÃO: Você ainda não informou a data da coleta!\n\n' +
              'Para completar seu agendamento, é necessário selecionar uma data.\n' +
              'Você será redirecionado para o formulário.');
        
        // Limpar dados incompletos
        localStorage.removeItem('agendamento');
        
        // Redirecionar para o formulário após um breve delay
        setTimeout(() => {
          window.location.href = '/formulario';
        }, 2000);
        
        // Mostrar mensagem de agendamento incompleto
        mensagem.style.display = 'block';
        mensagem.textContent = 'Agendamento incompleto - redirecionando...';
        card.style.display = 'none';
        extra.innerHTML = '';
        return;
      }

      // Verificar se a data está no formato correto
      if (!validarFormatoData(dados.data)) {
        alert('⚠️ ERRO: Data em formato inválido!\n\n' +
              'Por favor, selecione uma data válida no calendário.');
        
        localStorage.removeItem('agendamento');
        setTimeout(() => {
          window.location.href = '/formulario';
        }, 2000);
        return;
      }
      
      // Continuar com o processamento normal se a data estiver presente e válida
      mensagem.style.display = 'none';
      card.style.display = 'block';
      
      // Verificar e converter o ID da coleta para número
      if (dados.idColeta) {
        const idColetaNum = parseInt(dados.idColeta);
        if (!isNaN(idColetaNum)) {
          card.dataset.idColeta = idColetaNum;
          console.log('ID da coleta definido:', card.dataset.idColeta);
        } else {
          console.error('ID da coleta inválido:', dados.idColeta);
        }
      }
      
      // Formatar a data para exibição
      const dataFormatada = formatarDataExibicao(dados.data);
      
      card.innerHTML = `
        <div><strong>${dados.local || 'Local não especificado'}</strong></div>
        <div class="data-material">${dataFormatada} - ${dados.material || 'Material não especificado'}</div>
      `;
      
      extra.innerHTML = `
        <div class="nota">
          *Deixe seus resíduos recicláveis prontos para retirada e fique atento ao seu telefone.
        </div>
        <div class="button-container">
          <button onclick="cancelarAgendamento()" class="btn-cancelar">Cancelar coleta</button>
          <button onclick="reagendar()" class="btn-reagendar">Reagendar</button>
        </div>
      `;
    } catch (e) {
      console.error('Erro ao processar dados do agendamento:', e);
      alert('Erro ao carregar agendamento. Os dados podem estar corrompidos.');
      localStorage.removeItem('agendamento');
    }
  } else {
    // Não há agendamento salvo
    mensagem.style.display = 'block';
    mensagem.textContent = 'Nenhuma coleta agendada';
    card.style.display = 'none';
    extra.innerHTML = '';
  }
}

// Função para validar o formato da data
function validarFormatoData(data) {
  if (!data) return false;
  
  // Verificar se está no formato DD/MM/AAAA ou AAAA-MM-DD
  const formatoBR = /^\d{2}\/\d{2}\/\d{4}$/;
  const formatoISO = /^\d{4}-\d{2}-\d{2}$/;
  
  if (formatoBR.test(data)) {
    // Verificar se é uma data válida
    const [dia, mes, ano] = data.split('/').map(Number);
    const dataObj = new Date(ano, mes - 1, dia);
    return dataObj.getDate() === dia && 
           dataObj.getMonth() === mes - 1 && 
           dataObj.getFullYear() === ano;
  }
  
  if (formatoISO.test(data)) {
    // Verificar se é uma data válida
    const dataObj = new Date(data);
    return !isNaN(dataObj.getTime());
  }
  
  return false;
}

// Função para formatar data para exibição
function formatarDataExibicao(data) {
  if (!data) return 'Data não especificada';
  
  // Se estiver no formato ISO (AAAA-MM-DD), converter para DD/MM/AAAA
  if (data.includes('-') && data.length === 10) {
    const [ano, mes, dia] = data.split('-');
    return `${dia}/${mes}/${ano}`;
  }
  
  // Se já estiver no formato brasileiro, retornar como está
  return data;
}

// Função melhorada para salvar agendamento com validação de data
function salvarAgendamento(dados) {
  // Validar se a data foi fornecida
  if (!dados.data) {
    alert('⚠️ ERRO: É obrigatório selecionar uma data para a coleta!');
    return false;
  }
  
  // Validar formato da data
  if (!validarFormatoData(dados.data)) {
    alert('⚠️ ERRO: Data em formato inválido! Use o calendário para selecionar uma data válida.');
    return false;
  }
  
  // Verificar se a data não é no passado
  const hoje = new Date();
  const dataColeta = new Date(dados.data);
  
  // Resetar as horas para comparar apenas as datas
  hoje.setHours(0, 0, 0, 0);
  dataColeta.setHours(0, 0, 0, 0);
  
  if (dataColeta < hoje) {
    alert('⚠️ ERRO: Não é possível agendar coleta para uma data no passado!');
    return false;
  }
  
  // Converter data para formato padrão se necessário
  if (dados.data.includes('-')) {
    // Está no formato ISO, converter para DD/MM/AAAA para exibição
    const [ano, mes, dia] = dados.data.split('-');
    dados.dataExibicao = `${dia}/${mes}/${ano}`;
  } else {
    dados.dataExibicao = dados.data;
  }
  
  // Salvar no localStorage
  try {
    localStorage.setItem('agendamento', JSON.stringify(dados));
    console.log('Agendamento salvo com sucesso:', dados);
    return true;
  } catch (error) {
    console.error('Erro ao salvar agendamento:', error);
    alert('Erro ao salvar agendamento. Tente novamente.');
    return false;
  }
}

// Função para configurar input de data no calendário
function configurarCalendario() {
  const inputData = document.getElementById('data-coleta');
  if (!inputData) return;
  
  // Definir data mínima como hoje
  const hoje = new Date();
  const dataMinima = hoje.toISOString().split('T')[0];
  inputData.setAttribute('min', dataMinima);
  
  // Adicionar listener para validação em tempo real
  inputData.addEventListener('change', function() {
    const dataSelecionada = this.value;
    
    if (!dataSelecionada) {
      this.setCustomValidity('Por favor, selecione uma data para a coleta.');
      return;
    }
    
    const dataColeta = new Date(dataSelecionada);
    const hoje = new Date();
    hoje.setHours(0, 0, 0, 0);
    
    if (dataColeta < hoje) {
      this.setCustomValidity('Não é possível agendar para uma data no passado.');
      alert('⚠️ ERRO: Não é possível agendar coleta para uma data no passado!');
      this.value = '';
      return;
    }
    
    // Verificar se é fim de semana (opcional)
    const diaSemana = dataColeta.getDay();
    if (diaSemana === 0 || diaSemana === 6) {
      const confirmar = confirm('⚠️ ATENÇÃO: Você selecionou um fim de semana.\n\n' +
                               'Deseja continuar? (A coleta pode não estar disponível aos fins de semana)');
      if (!confirmar) {
        this.value = '';
        return;
      }
    }
    
    this.setCustomValidity('');
    console.log('Data selecionada:', dataSelecionada);
  });
  
  // Adicionar validação visual
  inputData.addEventListener('invalid', function() {
    this.style.borderColor = '#e74c3c';
  });
  
  inputData.addEventListener('input', function() {
    this.style.borderColor = '';
  });
}

async function cancelarAgendamento() {
  const card = document.getElementById('info-agendamento');
  const mensagem = document.getElementById('mensagem-agendamento');
  const extra = document.getElementById('info-extra');
  
  let idColeta = card.dataset.idColeta;
  idColeta = parseInt(idColeta);
  
  console.log('Tentando cancelar coleta com ID:', idColeta);
  
  if (!idColeta || isNaN(idColeta)) {
    console.error('ID da coleta inválido:', idColeta);
    return alert('ID da coleta inválido ou não encontrado.');
  }
  
  // Confirmar cancelamento
  const confirmar = confirm('⚠️ CONFIRMAÇÃO\n\nTem certeza que deseja cancelar esta coleta?\n\nEsta ação não pode ser desfeita.');
  if (!confirmar) return;
  
  try {
    const res = await fetch('/cancelar-coleta', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ idColeta })
    });
    
    console.log('Status da resposta:', res.status);
    const json = await res.json();
    console.log('Resposta completa:', json);
    
    if (json.sucesso) {
      localStorage.removeItem('agendamento');
      localStorage.setItem('agendamentoStatus', 'cancelado');
      
      mensagem.style.display = 'block';
      mensagem.textContent = 'Nenhuma coleta agendada';
      card.style.display = 'none';
      extra.innerHTML = `
        <div class="nota" style="color: #27ae60; background-color: #d5f4e6; padding: 10px; border-radius: 5px;">
          ✅ Agendamento cancelado com sucesso.
        </div>
      `;
      
      // Mostrar opção para novo agendamento após alguns segundos
      setTimeout(() => {
        extra.innerHTML += `
          <div class="button-container" style="margin-top: 15px;">
            <button onclick="window.location.href='/formulario'" class="btn-reagendar">
              Fazer novo agendamento
            </button>
          </div>
        `;
      }, 2000);
      
    } else {
      alert('❌ Não foi possível cancelar: ' + (json.mensagem || 'Erro desconhecido'));
    }
  } catch (err) {
    console.error('Erro detalhado:', err);
    alert('❌ Erro na requisição de cancelamento. Verifique sua conexão e tente novamente.');
  }
}

function reagendar() {
  window.location.href = '/formulario';
}

function voltarPagina() {
  const lastPage = document.referrer || '/';
  window.location.href = lastPage;
}

// Inicializar quando a página carregar
document.addEventListener('DOMContentLoaded', function() {
  carregarAgendamento();
  configurarCalendario();
});
  </script>
</body>
</html>
