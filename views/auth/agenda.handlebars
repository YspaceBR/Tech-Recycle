<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <title>Minhas Coletas</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    .formulario-coleta {
      background-color: #f5f5f5;
      border-radius: 12px;
      padding: 16px;
      margin-bottom: 10px;
      margin: 5px 10px;
    }
    .formulario-coleta strong {
      display: block;
      font-family: "Montserrat", sans-serif;
      font-weight: 600;
      color: #333;
      font-size: 18px;
      margin-bottom: 6px;
    }
    .formulario-coleta .data-material {
      color: #04b700;
      font-weight: 500;
      font-family: "Montserrat", sans-serif;
      font-size: 15px;
      margin-top: 20px;
    }
    .nota {
      font-family: "SourceCodePro", sans-serif;
      font-weight: 500;
      font-size: 12px;
      color: gray;
      margin-top: 8px;
      margin-bottom: 8px;
      padding: 0 5px;
    }
    .button-container {
      display: flex;
      gap: 12vh;
      margin-top: 10px;
    }
    .btn-cancelar {
      background-color: #ff3b3b;
      color: white;
      width: 180px;
      padding: 10px 0;
      font-weight: 600;
      font-family: "Montserrat", sans-serif;
      border: none;
      font-size: 15px;
      border-radius: 8px;
    }
    .btn-cancelar:hover {
      background-color: #cc2e2e;
    }
    .btn-reagendar {
      background-color: #28a745;
      color: white;
      border: 1px solid #04b700;
      width: 180px;
      font-family: "Montserrat", sans-serif;
      padding: 10px 0;
      font-weight: 600;
      font-size: 15px;
      border-radius: 8px;
    }
    .btn-reagendar:hover {
      color: #28a745;
      background-color: white;
    }
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.4);
    }
    .modal-content {
      background-color: #fefefe;
      margin: 15% auto;
      padding: 20px;
      border-radius: 10px;
      width: 80%;
      max-width: 500px;
    }
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }
    .close:hover,
    .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
    }
    .modal-header {
      margin-bottom: 20px;
    }
    .modal-footer {
      margin-top: 20px;
      text-align: right;
    }
    .form-group {
      margin-bottom: 15px;
    }
    .form-control {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      box-sizing: border-box;
    }
    .btn-success {
      background-color: #28a745;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    .btn-success:hover {
      background-color: #218838;
    }
    .alert {
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 15px;
    }
    .alert-success {
      background-color: #d5f4e6;
      color: #27ae60;
    }
    .alert-danger {
      background-color: #f8d7da;
      color: #c0392b;
    }
  </style>
</head>
<body>
  <a href="#" style="font-size: 20px;" class="btn-login" id="back-btn" onclick="voltarPagina()">&#x276E;</a>

  <!-- Mensagem que fica acima do card -->
  <h3 id="mensagem-agendamento" style="font-size: 16px;font-weight: 600;margin-left: 10px; margin-top:2vh">Nenhuma coleta agendada</h3>

  <!-- Card com os dados -->
  <div class="formulario-coleta" id="info-agendamento" style="display: none;" data-id-coleta=""></div>

  <!-- Elementos abaixo do card -->
  <div id="info-extra" style="margin-bottom: 10px; padding: 10px"></div>

  <h3 style="margin-left: 10px; margin-top:20px; font-weight: 600;">Acesse o mapa para agendar<br>novas coletas a domicílio</h3>

  <div class="container-maps" style="margin-left: 10px;">
    <button class="pontos-maps" onclick="window.location.href='/mapa'">
      Ir para o mapa
    </button>
  </div>

  <!-- Modal de Reagendamento -->
  <div id="modal-reagendamento" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <span class="close" onclick="fecharModalReagendamento()">&times;</span>
        <h2>Reagendar Coleta</h2>
      </div>
      <div id="modal-alert"></div>
      <div class="form-group">
        <label for="nova-data">Selecione a nova data:</label>
        <input type="date" id="nova-data" class="form-control" min="">
      </div>
      <div class="modal-footer">
        <button class="btn-success" onclick="confirmarReagendamento()">Confirmar</button>
      </div>
    </div>
  </div>

  <script>
    function logDebug(msg, obj) {
      if (window.console && console.log) {
        console.log(msg, obj || '');
      }
    }

    // Função para buscar agendamento do servidor
    async function buscarAgendamentoServidor() {
      try {
        const response = await fetch('/buscar-agendamento', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();
        
        if (data.sucesso && data.agendamento) {
          exibirAgendamento(data.agendamento);
        } else {
          // Se não encontrou no servidor, verificar no localStorage
          verificarAgendamentoLocal();
        }
      } catch (error) {
        console.error('Erro ao buscar agendamento:', error);
        // Em caso de erro, verificar no localStorage
        verificarAgendamentoLocal();
      }
    }

    // Função para verificar agendamento no localStorage
    function verificarAgendamentoLocal() {
      try {
        const agendamentoStr = localStorage.getItem('agendamento');
        if (agendamentoStr) {
          const agendamento = JSON.parse(agendamentoStr);
          if (agendamento && (agendamento.local || agendamento.material)) {
            exibirAgendamento(agendamento);
            return;
          }
        }
        // Se não encontrou no localStorage ou dados incompletos
        exibirNenhumAgendamento();
      } catch (e) {
        console.error('Erro ao verificar agendamento local:', e);
        exibirNenhumAgendamento();
      }
    }

    // Função para exibir o agendamento
    function exibirAgendamento(agendamento) {
      const card = document.getElementById('info-agendamento');
      const mensagem = document.getElementById('mensagem-agendamento');
      const extra = document.getElementById('info-extra');

      // Esconder mensagem e mostrar card
      mensagem.style.display = 'none';
      card.style.display = 'block';

      // Definir ID da coleta no card
      if (agendamento.idColeta) {
        card.dataset.idColeta = agendamento.idColeta;
      }

      // Dados seguros
      const local = escapeHTML(agendamento.local || 'Local não especificado');
      const material = escapeHTML(agendamento.material || 'Material não especificado');
      const dataFormatada = agendamento.dataExibicao || formatarDataExibicao(agendamento.data);
      const peso = agendamento.peso ? ` (${agendamento.peso})` : '';

      // Preencher o card
      card.innerHTML = `
        <div><strong>${local}</strong></div>
        <div class="data-material">${dataFormatada} - ${material}${peso}</div>
      `;

      // Preencher elementos extras
      extra.innerHTML = `
        <div class="nota">
          *Deixe seus resíduos recicláveis prontos para retirada e fique atento ao seu telefone.
        </div>
        <div class="button-container">
          <button onclick="cancelarAgendamento()" class="btn-cancelar">Cancelar coleta</button>
          <button onclick="abrirModalReagendamento()" class="btn-reagendar">Reagendar</button>
        </div>
      `;

      // Salvar os dados do agendamento no localStorage (garante a consistência)
      try {
        localStorage.setItem('agendamento', JSON.stringify(agendamento));
      } catch (e) {
        console.error('Erro ao salvar agendamento no localStorage:', e);
      }
    }

    // Função para exibir quando não há agendamentos
    function exibirNenhumAgendamento() {
      const card = document.getElementById('info-agendamento');
      const mensagem = document.getElementById('mensagem-agendamento');
      const extra = document.getElementById('info-extra');

      mensagem.textContent = 'Nenhuma coleta agendada';
      mensagem.style.display = 'block';
      card.style.display = 'none';
      extra.innerHTML = '';
    }

    // Função para formatar data para exibição
    function formatarDataExibicao(data) {
      if (!data) return 'Data não especificada';
      
      if (data.includes('-')) {
        const [ano, mes, dia] = data.split('-');
        return `${dia}/${mes}/${ano}`;
      }
      
      if (data.includes('/')) {
        return data; // Já está no formato brasileiro
      }
      
      // Tentar converter se for um objeto Date
      try {
        const date = new Date(data);
        return date.toLocaleDateString('pt-BR');
      } catch (e) {
        return data;
      }
    }

    // Função para cancelar agendamento
    function cancelarAgendamento() {
      const card = document.getElementById('info-agendamento');
      const extra = document.getElementById('info-extra');
      const mensagem = document.getElementById('mensagem-agendamento');

      const idColeta = parseInt(card.dataset.idColeta);
      if (!idColeta || isNaN(idColeta)) {
        alert('ID da coleta inválido.');
        return;
      }

      if (!confirm('Tem certeza que deseja cancelar esta coleta?')) {
        return;
      }

      // Mostrar loading
      const btnCancelar = document.querySelector('.btn-cancelar');
      const textoOriginal = btnCancelar.textContent;
      btnCancelar.textContent = 'Cancelando...';
      btnCancelar.disabled = true;

      fetch('/cancelar-coleta', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ idColeta })
      })
        .then(res => res.json())
        .then(json => {
          if (json.sucesso) {
            // Limpar localStorage se existir
            localStorage.removeItem('agendamento');
            
            // Mostrar sucesso
            mensagem.textContent = 'Nenhuma coleta agendada';
            mensagem.style.display = 'block';
            card.style.display = 'none';
            extra.innerHTML = `
              <div class="nota" style="color: #27ae60; background-color: #d5f4e6; padding: 10px; border-radius: 5px;">
                ✅ Agendamento cancelado com sucesso.
              </div>
              <div class="button-container" style="margin-top: 15px;">
                <button onclick="window.location.href='/formulario'" class="btn-reagendar">Fazer novo agendamento</button>
              </div>
            `;
          } else {
            alert('Erro ao cancelar: ' + (json.mensagem || 'Erro desconhecido'));
            // Restaurar botão
            btnCancelar.textContent = textoOriginal;
            btnCancelar.disabled = false;
          }
        })
        .catch(err => {
          console.error('Erro ao cancelar coleta:', err);
          alert('Erro ao cancelar coleta. Tente novamente mais tarde.');
          // Restaurar botão
          btnCancelar.textContent = textoOriginal;
          btnCancelar.disabled = false;
        });
    }

    // Funções para o modal de reagendamento
    function abrirModalReagendamento() {
      const modal = document.getElementById('modal-reagendamento');
      const inputData = document.getElementById('nova-data');
      
      // Definir data mínima como hoje
      const hoje = new Date();
      const ano = hoje.getFullYear();
      const mes = String(hoje.getMonth() + 1).padStart(2, '0');
      const dia = String(hoje.getDate()).padStart(2, '0');
      inputData.min = `${ano}-${mes}-${dia}`;
      
      // Limpar alerta
      document.getElementById('modal-alert').innerHTML = '';
      
      // Mostrar modal
      modal.style.display = 'block';
    }

    function fecharModalReagendamento() {
      const modal = document.getElementById('modal-reagendamento');
      modal.style.display = 'none';
    }

    function confirmarReagendamento() {
      const idColeta = document.getElementById('info-agendamento').dataset.idColeta;
      const novaData = document.getElementById('nova-data').value;
      const alertDiv = document.getElementById('modal-alert');
      
      // Validar data
      if (!novaData) {
        alertDiv.innerHTML = '<div class="alert alert-danger">Por favor, selecione uma data.</div>';
        return;
      }
      
      // Mostrar carregando
      const btnConfirmar = document.querySelector('.btn-success');
      btnConfirmar.textContent = 'Reagendando...';
      btnConfirmar.disabled = true;
      
      // Enviar para o servidor
      fetch('/reagendar-coleta', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ idColeta, novaData })
      })
      .then(res => res.json())
      .then(data => {
        if (data.sucesso) {
          // Fechar modal
          fecharModalReagendamento();
          
          // Atualizar exibição
          const agendamento = JSON.parse(localStorage.getItem('agendamento') || '{}');
          agendamento.data = novaData;
          agendamento.dataExibicao = data.novaDataExibicao;
          
          // Atualizar a exibição
          exibirAgendamento(agendamento);
          
          // Mostrar mensagem de sucesso
          const extra = document.getElementById('info-extra');
          extra.innerHTML += `
            <div class="nota" style="color: #27ae60; background-color: #d5f4e6; padding: 10px; border-radius: 5px; margin-top: 10px;">
              ✅ Coleta reagendada com sucesso para ${data.novaDataExibicao}.
            </div>
          `;
        } else {
          alertDiv.innerHTML = `<div class="alert alert-danger">${data.mensagem || 'Erro ao reagendar coleta'}</div>`;
          btnConfirmar.textContent = 'Confirmar';
          btnConfirmar.disabled = false;
        }
      })
      .catch(err => {
        console.error('Erro ao reagendar:', err);
        alertDiv.innerHTML = '<div class="alert alert-danger">Erro ao reagendar. Tente novamente.</div>';
        btnConfirmar.textContent = 'Confirmar';
        btnConfirmar.disabled = false;
      });
    }

    // Função para voltar página
    function voltarPagina() {
      const lastPage = document.referrer || '/';
      window.location.href = lastPage;
    }

    // Função para escapar HTML
    function escapeHTML(str) {
      if (!str) return '';
      const div = document.createElement('div');
      div.appendChild(document.createTextNode(str));
      return div.innerHTML;
    }

    // Fechar modal quando clicar fora
    window.onclick = function(event) {
      const modal = document.getElementById('modal-reagendamento');
      if (event.target == modal) {
        modal.style.display = "none";
      }
    }

    // Carregar página
    document.addEventListener('DOMContentLoaded', function () {
      // Verificar se há parâmetro de ID na URL
      const urlParams = new URLSearchParams(window.location.search);
      const idColetaParam = urlParams.get('idColeta');

      if (idColetaParam) {
        // Se veio da página de agendamento, salvar ID no localStorage temporariamente
        let agendamentoLocal = {};
        try {
          const agendamentoStr = localStorage.getItem('agendamento');
          if (agendamentoStr) {
            agendamentoLocal = JSON.parse(agendamentoStr);
          }
        } catch (e) {
          logDebug('Erro ao parsear agendamento local:', e);
        }
        
        agendamentoLocal.idColeta = idColetaParam;
        localStorage.setItem('agendamento', JSON.stringify(agendamentoLocal));
      }

      // Primeiro verificar no localStorage (para resposta imediata)
      verificarAgendamentoLocal();
      
      // Depois buscar do servidor (para dados atualizados)
      buscarAgendamentoServidor();
    });
  </script>
</body>
</html>